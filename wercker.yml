# This references the default golang container from
# the Docker Hub: https://registry.hub.docker.com/u/library/golang/
# If you want Google's container you would reference google/golang
# Read more about containers on our dev center
# http://devcenter.wercker.com/docs/containers/index.html
box: golang
# This is the build pipeline. Pipelines are the core of wercker
# Read more about pipelines on our dev center
# http://devcenter.wercker.com/docs/pipelines/index.html

# You can also use services such as databases. Read more on our dev center:
# http://devcenter.wercker.com/docs/services/index.html
# services:
    # - postgres
    # http://devcenter.wercker.com/docs/services/postgresql.html

    # - mongodb
    # http://devcenter.wercker.com/docs/services/mongodb.html
build:
  # The steps that will be executed on build
  # Steps make up the actions in your pipeline
  # Read more about steps on our dev center:
  # http://devcenter.wercker.com/docs/steps/index.html
  steps:
    # Sets the go workspace and places you package
    # at the right place in the workspace tree
    - setup-go-workspace
    - glide-install

    # Gets the dependencies
    - script:
        name: glide install
        code: |
          glide install

    # Test the project
    - script:
        name: tests
        code: |
          go test -v -race `glide novendor`

    # Build the project
    - script:
        name: go build
        code: |
          CGO_ENABLED=0 GOOS=linux go build -ldflags "-s -w -X main.Version=$(git symbolic-ref -q --short HEAD || git describe --tags --exact-match) -X main.BuildDate=$(date -u '+%Y-%m-%d_%I:%M:%S%p')" -a -installsuffix nocgo -o main .

    - script:
        name: copy binary
        code: cp main "$WERCKER_OUTPUT_DIR"